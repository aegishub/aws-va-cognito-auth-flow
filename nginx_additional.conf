server {
    listen 80;

    # This is the name of the server block.
    # It should match the domain name you are using for your web application.
    # You can specify multiple server names by separating them with spaces.
    # For example: server_name web.platform-bo.com www.platform-bo.com;
    # If you are using a wildcard subdomain, you can use *.platform-bo.com
    # In this case, it will match any subdomain of platform-bo.com.
    server_name web.platform-bo.com;

    # Redirect all HTTP traffic to HTTPS
    # Uncomment the next line to enable HTTP to HTTPS redirection
    #ssl_certificate     /etc/ssl/cloudflare/fullchain.pem;
    #ssl_certificate_key /etc/ssl/cloudflare/privkey.pem;

    # Logging configuration
    # 'verified_access' is a custom log format that includes the Verified Access user context
    # The logging format defined in /etc/nginx/nginx.conf (base nginx config)  
    access_log /var/log/nginx/access.log verified_access;
    error_log  /var/log/nginx/error.log;


    # ---------------------------
    # === Public resources ===    
    # ---------------------------

    # This is Cognito callback URL
    # It is used to handle the response from Cognito after the user has logged in.
    # The user will be redirected to this URL with an authorization code.
    # The backend will then exchange the code for tokens and set the cookies.
    location = /callback {
        proxy_pass http://127.0.0.1:4000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # --- Signout URL ---
    # These URLs are used to handle the signout process.
    # The user will be redirected to the signout URL, which will then redirect to Cognito's logout endpoint.
    # After logging out from Cognito, the user will be redirected to /signout/complete.
    # The backend will then clear the auth cookies and redirect the user to the login page.
    location = /signout {
        proxy_pass http://127.0.0.1:4000;
        proxy_set_header Host $host;
    }

    # --- Login page ---
    # This location block is used to serve the login page.
    # It is called when the user tries to access a protected resource without a valid access token.
    # The user will be redirected to this page to log in.
    # After logging in, the user will be redirected back to the /callback URL.  
    location = /login {
        proxy_pass http://127.0.0.1:4000;
        proxy_set_header Host $host;
    }

    # === Check access token ===
    # This location block is used to verify the access token.
    # It is called by the auth_request directive in the / location block.
    # If the token is valid, it will return a 200 OK response.
    # If the token is invalid or missing, it will return a 401 Unauthorized response.
    location = /auth/verify {
        internal;
        proxy_pass http://127.0.0.1:4000/auth/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header Cookie $http_cookie;
        proxy_set_header Host $host;
    }

    # ---------------------------
    # === PROTECTED RESOURCES ===
    # ---------------------------

    # this location block is used to protect all resources on the web app
    # and requires a valid access token to be present in the request.
    # If the token is valid, it will pass the request to the backend.
    # If the token is invalid or missing, it will return a 401 Unauthorized response
    # and redirect the user to the login page.
    location / {
        auth_request /auth/verify;
        error_page 401 = @unauthorized;

        # Передаємо заголовок Verified Access до бекенда
        # This header is set by AWS Verified Access and contains user context information.
        proxy_set_header x-amzn-ava-user-context $http_x-amzn-ava-user-context;

        # Optional. When using VA/Cognito, you might want to pass the access token
        # to your backend for further verification or user context.
        # This assumes you have set the access token in a cookie named 'access_token'.
        # Uncomment the next line if you want to pass the access token to your backend
        # proxy_set_header Authorization "Bearer $cookie_access_token";

	# This is root location block for the web application.
        # It serves the index.html file and handles static files.
        # If a requested file is not found, it will return a 404 error.
        # You can customize the root directory and index file as needed.
	root /var/www/html;
        index index.html;

	try_files $uri $uri/ =404;
    }

    # === Обробка 401 — редирект на логін ===
    location @unauthorized {
        return 302 /login;
    }
}
